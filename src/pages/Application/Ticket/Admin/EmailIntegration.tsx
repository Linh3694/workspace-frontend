import React, { useState } from "react";
import axios from "axios";
import { API_URL } from "../../../core/config";
import { toast } from "react-toastify";

const EmailIntegration: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [lastFetchTime, setLastFetchTime] = useState<string | null>(null);
  const [emailStats, setEmailStats] = useState({
    totalEmails: 0,
    newTickets: 0,
    lastSync: null as string | null,
  });

  const handleFetchEmails = async () => {
    try {
      setLoading(true);
      const res = await axios.get(`${API_URL}/email/fetch-emails`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("authToken")}`,
        },
      });
      if (res.data.success) {
        toast.success(res.data.message);
        setLastFetchTime(new Date().toLocaleString("vi-VN"));
        
        // C·∫≠p nh·∫≠t stats n·∫øu c√≥
        if (res.data.stats) {
          setEmailStats(res.data.stats);
        }
      } else {
        toast.error("Kh√¥ng th·ªÉ fetch emails: " + (res.data.message || ""));
      }
    } catch (error: any) {
      console.error(error);
      toast.error(
        error.response?.data?.message || "C√≥ l·ªói x·∫£y ra khi fetch emails."
      );
    } finally {
      setLoading(false);
    }
  };

  const handleTestConnection = async () => {
    try {
      setLoading(true);
      const res = await axios.get(`${API_URL}/email/test-connection`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("authToken")}`,
        },
      });
      if (res.data.success) {
        toast.success("K·∫øt n·ªëi email th√†nh c√¥ng!");
      } else {
        toast.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi email: " + (res.data.message || ""));
      }
    } catch (error: any) {
      console.error(error);
      toast.error(
        error.response?.data?.message || "C√≥ l·ªói x·∫£y ra khi test k·∫øt n·ªëi."
      );
    } finally {
      setLoading(false);
    }
  };

  const handleSyncSettings = async () => {
    try {
      setLoading(true);
      const res = await axios.post(
        `${API_URL}/email/sync-settings`,
        {
          autoSync: true,
          syncInterval: 300000, // 5 ph√∫t
        },
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("authToken")}`,
          },
        }
      );
      if (res.data.success) {
        toast.success("ƒê√£ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t ƒë·ªìng b·ªô!");
      } else {
        toast.error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t: " + (res.data.message || ""));
      }
    } catch (error: any) {
      console.error(error);
      toast.error(
        error.response?.data?.message || "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t c√†i ƒë·∫∑t."
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="w-full h-full bg-white rounded-xl shadow-xl p-6">
      {/* Header */}
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-[#002147] mb-2">
          T√≠ch h·ª£p Email
        </h1>
        <p className="text-gray-600">
          Qu·∫£n l√Ω vi·ªác ƒë·ªìng b·ªô email v√† t·ª± ƒë·ªông t·∫°o ticket t·ª´ email
        </p>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-6 rounded-lg">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-blue-100 text-sm">T·ªïng Email</p>
              <p className="text-2xl font-bold">{emailStats.totalEmails}</p>
            </div>
            <div className="text-3xl opacity-80">üìß</div>
          </div>
        </div>

        <div className="bg-gradient-to-r from-green-500 to-green-600 text-white p-6 rounded-lg">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-green-100 text-sm">Ticket M·ªõi</p>
              <p className="text-2xl font-bold">{emailStats.newTickets}</p>
            </div>
            <div className="text-3xl opacity-80">üé´</div>
          </div>
        </div>

        <div className="bg-gradient-to-r from-purple-500 to-purple-600 text-white p-6 rounded-lg">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-purple-100 text-sm">ƒê·ªìng b·ªô cu·ªëi</p>
              <p className="text-sm font-medium">
                {emailStats.lastSync
                  ? new Date(emailStats.lastSync).toLocaleString("vi-VN")
                  : "Ch∆∞a ƒë·ªìng b·ªô"}
              </p>
            </div>
            <div className="text-3xl opacity-80">üîÑ</div>
          </div>
        </div>
      </div>

      {/* Action Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        {/* Fetch Emails Card */}
        <div className="border border-gray-200 rounded-lg p-6">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-12 h-12 bg-[#FF5733] rounded-lg flex items-center justify-center text-white text-xl">
              üì•
            </div>
            <div>
              <h3 className="text-lg font-semibold text-[#002147]">
                L·∫•y Email & T·∫°o Ticket
              </h3>
              <p className="text-sm text-gray-600">
                ƒê·ªìng b·ªô email m·ªõi v√† t·ª± ƒë·ªông t·∫°o ticket
              </p>
            </div>
          </div>
          
          <button
            disabled={loading}
            onClick={handleFetchEmails}
            className="w-full px-4 py-3 bg-[#FF5733] text-white rounded-lg font-semibold hover:bg-[#E64A2E] disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
          >
            {loading ? (
              <div className="flex items-center justify-center gap-2">
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                ƒêang x·ª≠ l√Ω...
              </div>
            ) : (
              "L·∫•y Email M·ªõi"
            )}
          </button>
          
          {lastFetchTime && (
            <p className="text-xs text-gray-500 mt-2">
              L·∫ßn cu·ªëi: {lastFetchTime}
            </p>
          )}
        </div>

        {/* Test Connection Card */}
        <div className="border border-gray-200 rounded-lg p-6">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-12 h-12 bg-[#002855] rounded-lg flex items-center justify-center text-white text-xl">
              üîó
            </div>
            <div>
              <h3 className="text-lg font-semibold text-[#002147]">
                Ki·ªÉm tra K·∫øt n·ªëi
              </h3>
              <p className="text-sm text-gray-600">
                Test k·∫øt n·ªëi v·ªõi email server
              </p>
            </div>
          </div>
          
          <button
            disabled={loading}
            onClick={handleTestConnection}
            className="w-full px-4 py-3 bg-[#002855] text-white rounded-lg font-semibold hover:bg-[#001a3d] disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
          >
            {loading ? (
              <div className="flex items-center justify-center gap-2">
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                ƒêang ki·ªÉm tra...
              </div>
            ) : (
              "Test K·∫øt n·ªëi"
            )}
          </button>
        </div>
      </div>

      {/* Settings Section */}
      <div className="border border-gray-200 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-[#002147] mb-4">
          C√†i ƒë·∫∑t ƒê·ªìng b·ªô
        </h3>
        
        <div className="space-y-4">
          <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
            <div>
              <h4 className="font-medium text-gray-900">T·ª± ƒë·ªông ƒë·ªìng b·ªô</h4>
              <p className="text-sm text-gray-600">
                T·ª± ƒë·ªông l·∫•y email m·ªõi m·ªói 5 ph√∫t
              </p>
            </div>
            <button
              disabled={loading}
              onClick={handleSyncSettings}
              className="px-4 py-2 bg-green-500 text-white rounded-lg font-medium hover:bg-green-600 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
            >
              {loading ? "ƒêang c·∫≠p nh·∫≠t..." : "B·∫≠t t·ª± ƒë·ªông"}
            </button>
          </div>

          <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
            <div>
              <h4 className="font-medium text-gray-900">Th√¥ng b√°o</h4>
              <p className="text-sm text-gray-600">
                Nh·∫≠n th√¥ng b√°o khi c√≥ email m·ªõi
              </p>
            </div>
            <button
              className="px-4 py-2 bg-blue-500 text-white rounded-lg font-medium hover:bg-blue-600 transition-colors"
              onClick={() => toast.info("T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn")}
            >
              C·∫•u h√¨nh
            </button>
          </div>
        </div>
      </div>

      {/* Instructions */}
      <div className="mt-8 p-6 bg-blue-50 border border-blue-200 rounded-lg">
        <h3 className="text-lg font-semibold text-blue-900 mb-3">
          üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        </h3>
        <ul className="space-y-2 text-sm text-blue-800">
          <li className="flex items-start gap-2">
            <span className="text-blue-500 mt-1">‚Ä¢</span>
            <span>
              <strong>L·∫•y Email M·ªõi:</strong> ƒê·ªìng b·ªô email t·ª´ server v√† t·ª± ƒë·ªông t·∫°o ticket cho email m·ªõi
            </span>
          </li>
          <li className="flex items-start gap-2">
            <span className="text-blue-500 mt-1">‚Ä¢</span>
            <span>
              <strong>Test K·∫øt n·ªëi:</strong> Ki·ªÉm tra xem h·ªá th·ªëng c√≥ th·ªÉ k·∫øt n·ªëi v·ªõi email server kh√¥ng
            </span>
          </li>
          <li className="flex items-start gap-2">
            <span className="text-blue-500 mt-1">‚Ä¢</span>
            <span>
              <strong>T·ª± ƒë·ªông ƒë·ªìng b·ªô:</strong> B·∫≠t t√≠nh nƒÉng t·ª± ƒë·ªông l·∫•y email m·ªõi m·ªói 5 ph√∫t
            </span>
          </li>
          <li className="flex items-start gap-2">
            <span className="text-blue-500 mt-1">‚Ä¢</span>
            <span>
              Email s·∫Ω ƒë∆∞·ª£c chuy·ªÉn th√†nh ticket v·ªõi ti√™u ƒë·ªÅ l√† subject v√† n·ªôi dung l√† body c·ªßa email
            </span>
          </li>
        </ul>
      </div>
    </div>
  );
};

export default EmailIntegration; 