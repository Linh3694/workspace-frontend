import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "../../../components/ui/dialog";
import { Button } from "../../../components/ui/button";
import { Label } from "../../../components/ui/label";
import { Input } from "../../../components/ui/input";
import { DatePicker } from "../../../components/ui/datepicker";
import { Loader2, Upload, Calendar, FileText } from "lucide-react";
import { useToast } from "../../../hooks/use-toast";
import { api } from "../../../lib/api";
import { API_ENDPOINTS } from "../../../lib/config";
import * as XLSX from 'xlsx';
import type { TimetableImportRecord, TimetableImportPayload, PeriodDefinition } from "../../../types/timetable.types";

interface AddTimetableDialogProps {
  isOpen: boolean;
  onClose: () => void;
  selectedSchoolYear: string;
  selectedClass: string;
  onTimetableAdded: () => void;
  periodDefinitions: PeriodDefinition[];
}

interface TimetableFormData {
  name: string;
  startDate: Date | undefined;
  endDate: Date | undefined;
  file: File | null;
}

const formatDateLocal = (date: Date) =>
  date ? `${date.getFullYear()}-${(date.getMonth()+1).toString().padStart(2,'0')}-${date.getDate().toString().padStart(2,'0')}` : '';

export const AddTimetableDialog: React.FC<AddTimetableDialogProps> = ({
  isOpen,
  onClose,
  selectedSchoolYear,
  selectedClass,
  onTimetableAdded,
  periodDefinitions
}) => {
  const [formData, setFormData] = useState<TimetableFormData>({
    name: '',
    startDate: undefined,
    endDate: undefined,
    file: null
  });
  const [loading, setLoading] = useState(false);
  const [fileError, setFileError] = useState<string>('');
  const { toast } = useToast();

  const handleInputChange = (field: keyof TimetableFormData, value: string | File | null | Date | undefined) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    // Clear file error when file is selected
    if (field === 'file') {
      setFileError('');
    }
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0] || null;
    if (file) {
      // Validate file type
      if (!file.name.match(/\.(xlsx|xls)$/)) {
        setFileError('Ch·ªâ ch·∫•p nh·∫≠n file Excel (.xlsx, .xls)');
        return;
      }
      
      // Validate file size (max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        setFileError('File qu√° l·ªõn. K√≠ch th∆∞·ªõc t·ªëi ƒëa 5MB');
        return;
      }
      
      setFileError('');
    }
    handleInputChange('file', file);
  };

  const validateForm = (): boolean => {
    if (!formData.name.trim()) {
      toast({
        title: "L·ªói",
        description: "Vui l√≤ng nh·∫≠p t√™n th·ªùi kho√° bi·ªÉu",
        variant: "destructive"
      });
      return false;
    }

    if (!formData.startDate) {
      toast({
        title: "L·ªói",
        description: "Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu",
        variant: "destructive"
      });
      return false;
    }

    if (!formData.endDate) {
      toast({
        title: "L·ªói",
        description: "Vui l√≤ng ch·ªçn ng√†y k·∫øt th√∫c",
        variant: "destructive"
      });
      return false;
    }

    if (formData.startDate >= formData.endDate) {
      toast({
        title: "L·ªói",
        description: "Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu",
        variant: "destructive"
      });
      return false;
    }

    if (!formData.file) {
      toast({
        title: "L·ªói",
        description: "Vui l√≤ng ch·ªçn file th·ªùi kho√° bi·ªÉu",
        variant: "destructive"
      });
      return false;
    }

    return true;
  };

  const parseExcelFile = async (file: File, periodDefinitions: PeriodDefinition[]): Promise<TimetableImportRecord[]> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (event) => {
        try {
          const data = event.target?.result;
          const workbook = XLSX.read(data, { type: 'array' });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
          
          // Mapping t·ª´ ti·∫øng Vi·ªát sang ti·∫øng Anh cho dayOfWeek
          const dayOfWeekMapping: { [key: string]: string } = {
            "Th·ª© Hai": "Monday",
            "Th·ª© Ba": "Tuesday", 
            "Th·ª© T∆∞": "Wednesday",
            "Th·ª© NƒÉm": "Thursday",
            "Th·ª© S√°u": "Friday",
            "Th·ª© B·∫£y": "Saturday",
            "Ch·ªß Nh·∫≠t": "Sunday"
          };
          
          // Parse d·ªØ li·ªáu t·ª´ Excel ma tr·∫≠n th√†nh format BE expect
          const records: TimetableImportRecord[] = [];
          
          if (jsonData.length < 2) {
            reject(new Error('File Excel kh√¥ng c√≥ d·ªØ li·ªáu'));
            return;
          }
          
          // L·∫•y header row ƒë·ªÉ bi·∫øt c√°c l·ªõp (t·ª´ c·ªôt C tr·ªü ƒëi)
          const headerRow = jsonData[0] as unknown[];
          const classes = headerRow.slice(2); // B·ªè qua c·ªôt A (Th·ª©) v√† B (Ti·∫øt)
          
          console.log('üîç Parse Excel debug:', {
            totalRows: jsonData.length,
            headerRow: headerRow,
            classes: classes
          });
          
          // ‚úÖ TH√äM: T·∫°o period map v√† log th√¥ng tin
          const periodMap: { [key: number]: PeriodDefinition } = {};
          const regularPeriods: number[] = [];
          const specialPeriods: number[] = [];
          
          periodDefinitions.forEach(p => { 
            periodMap[p.periodNumber] = p; 
            if (p.type === 'regular') {
              regularPeriods.push(p.periodNumber);
            } else {
              specialPeriods.push(p.periodNumber);
            }
          });

          console.log('üîç Period analysis:', {
            totalPeriods: periodDefinitions.length,
            regularPeriods: regularPeriods.sort((a, b) => a - b),
            specialPeriods: specialPeriods.sort((a, b) => a - b),
            periodTypes: periodDefinitions.map(p => `${p.periodNumber}:${p.type}`)
          });
          
          let lastDayOfWeek = '';
          let processedCount = 0;
          let skippedSpecialCount = 0;
          let skippedInvalidCount = 0;
          
          for (let i = 1; i < jsonData.length; i++) {
            const row = jsonData[i] as unknown[];
            if (row.length < 3) continue; // B·ªè qua row kh√¥ng ƒë·ªß d·ªØ li·ªáu
            
            const dayOfWeekVietnamese = row[0]?.toString()?.trim() || lastDayOfWeek;
            if (row[0]) lastDayOfWeek = dayOfWeekVietnamese;
            
            const periodNumber = parseInt(row[1]?.toString() || '0') || 0;
            
            // Ch·ªâ x·ª≠ l√Ω n·∫øu c√≥ th·ª© v√† ti·∫øt
            if (!dayOfWeekVietnamese || !periodNumber) continue;
            
            // Convert ti·∫øng Vi·ªát sang ti·∫øng Anh
            const dayOfWeek = dayOfWeekMapping[dayOfWeekVietnamese];
            if (!dayOfWeek) {
              console.warn(`Kh√¥ng t√¨m th·∫•y mapping cho ng√†y: ${dayOfWeekVietnamese}`);
              continue;
            }
            
            // ‚úÖ KI·ªÇM TRA: Period definition v√† type
            const periodDef = periodMap[periodNumber];
            if (!periodDef) {
              console.warn(`‚ö†Ô∏è Period ${periodNumber} ch∆∞a ƒë∆∞·ª£c khai b√°o trong h·ªá th·ªëng`);
              skippedInvalidCount++;
              continue;
            }
            
            if (periodDef.type !== 'regular') {
              console.log(`‚è≠Ô∏è Skipping special period ${periodNumber} (${periodDef.type}): ${periodDef.label || 'No label'}`);
              skippedSpecialCount++;
              continue; // B·ªè qua ti·∫øt ƒë·∫∑c bi·ªát
            }
            
            // Duy·ªát qua t·ª´ng l·ªõp (t·ª´ c·ªôt C tr·ªü ƒëi)
            for (let j = 2; j < row.length && j - 2 < classes.length; j++) {
              const subject = row[j]?.toString()?.trim();
              const classCode = classes[j - 2]?.toString()?.trim();
              
              console.log(`üîç Processing cell [${i}][${j}]:`, {
                dayOfWeekVietnamese,
                dayOfWeek,
                periodNumber,
                periodType: periodDef.type,
                classCode,
                subject,
                hasSubject: !!subject,
                hasClass: !!classCode,
                subjectLength: subject?.length,
                classLength: classCode?.length
              });
              
              // Validation m·ªÅm h∆°n - ch·ªâ c·∫ßn c√≥ m√¥n h·ªçc v√† l·ªõp
              const isValidSubject = subject && 
                                   subject.toString().trim() !== '' && 
                                   subject !== 'undefined' && 
                                   subject !== 'null' &&
                                   !subject.toString().toLowerCase().includes('tr·ªëng');
                                   
              const isValidClass = classCode && 
                                 classCode.toString().trim() !== '' && 
                                 classCode !== 'undefined' && 
                                 classCode !== 'null';
              
              if (isValidSubject && isValidClass) {
                const record: TimetableImportRecord = {
                  dayOfWeek: dayOfWeek,
                  periodNumber: periodNumber,
                  classCode: classCode.toString().trim(),
                  subject: subject.toString().trim(),
                  teachers: [], 
                  room: 'Homeroom'
                };
                
                console.log(`‚úÖ Added record:`, record);
                records.push(record);
                processedCount++;
              } else {
                console.log(`‚ùå Skipped record - invalid data:`, {
                  subject: subject,
                  classCode: classCode,
                  isValidSubject,
                  isValidClass,
                  reason: !isValidSubject ? 'Invalid subject' : 'Invalid class'
                });
              }
            }
          }
          
          console.log('üîç Parse Excel results:', {
            totalRecords: records.length,
            processedCount,
            skippedSpecialCount,
            skippedInvalidCount,
            sampleRecords: records.slice(0, 3),
            uniqueDays: [...new Set(records.map(r => r.dayOfWeek))],
            uniqueSubjects: [...new Set(records.map(r => r.subject))].slice(0, 5),
            periodDistribution: records.reduce((acc, r) => {
              acc[r.periodNumber] = (acc[r.periodNumber] || 0) + 1;
              return acc;
            }, {} as { [key: number]: number })
          });
          
          resolve(records);
        } catch (error) {
          reject(error);
        }
      };
      reader.onerror = () => reject(new Error('Kh√¥ng th·ªÉ ƒë·ªçc file'));
      reader.readAsArrayBuffer(file);
    });
  };

  const handleSubmit = async () => {
    if (!validateForm()) return;

    try {
      setLoading(true);

      // T·∫°o th·ªùi kho√° bi·ªÉu m·ªõi
      const scheduleData = {
        name: formData.name,
        schoolYear: selectedSchoolYear,
        class: selectedClass,
        startDate: formData.startDate ? formatDateLocal(formData.startDate) : "",
        endDate: formData.endDate ? formatDateLocal(formData.endDate) : "",
      };

      console.log('üîç Schedule data debug:', {
        selectedSchoolYear,
        selectedClass,
        scheduleData
      });

      const scheduleRes = await api.post(API_ENDPOINTS.TIMETABLE_SCHEDULES, scheduleData);
      const scheduleId = scheduleRes.data.schedule._id;

      // N·∫øu c√≥ file, ƒë·ªçc file v√† import d·ªØ li·ªáu
      if (formData.file) {
        try {
          // ‚úÖ TH√äM: Ki·ªÉm tra period definitions tr∆∞·ªõc khi parse
          console.log('üîç Checking period definitions before parsing...');
          if (periodDefinitions.length === 0) {
            toast({
              title: "L·ªói",
              description: "Ch∆∞a khai b√°o ti·∫øt h·ªçc cho tr∆∞·ªùng n√†y. Vui l√≤ng khai b√°o ti·∫øt h·ªçc tr∆∞·ªõc khi import.",
              variant: "destructive"
            });
            return;
          }

          console.log('üîç Available period definitions:', periodDefinitions.map(p => ({
            periodNumber: p.periodNumber,
            type: p.type,
            startTime: p.startTime,
            endTime: p.endTime
          })));

          const records = await parseExcelFile(formData.file, periodDefinitions);
          
          if (records.length === 0) {
            toast({
              title: "C·∫£nh b√°o",
              description: "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu h·ª£p l·ªá trong file Excel",
              variant: "destructive"
            });
            return;
          }

          // L·∫•y danh s√°ch subjects ƒë·ªÉ map t√™n m√¥n h·ªçc th√†nh ID
          const subjectsResponse = await api.get(API_ENDPOINTS.SUBJECTS);
          const subjects = Array.isArray(subjectsResponse.data) ? subjectsResponse.data : subjectsResponse.data.data || [];
          
          console.log('üîç Available subjects in DB:', subjects.map((s: { name?: string; _id: string }) => s.name).slice(0, 10));
          
          // Mapping c√°c t√™n m√¥n h·ªçc ph·ªï bi·∫øn
          const commonSubjectMappings: { [key: string]: string[] } = {
            'to√°n': ['to√°n', 'toan', 'math', 'mathematics', 'to√°n h·ªçc', 'toanhoc'],
            'ti·∫øng anh': ['ti·∫øng anh', 'tieng anh', 'english', 'anh vƒÉn', 'anhvan', 'ti·∫øng anh esl', 'tieng anh esl'],
            'ti·∫øng vi·ªát': ['ti·∫øng vi·ªát', 'tieng viet', 'vietnamese', 'vi·ªát vƒÉn', 'viet van', 'vƒÉn', 'van'],
            'khoa h·ªçc': ['khoa h·ªçc', 'khoa hoc', 'science', 'kh', 'khoa h·ªçc ti·∫øng anh'],
            'th·ªÉ thao': ['th·ªÉ thao', 'the thao', 'physical education', 'pe', 'td'],
            '√¢m nh·∫°c': ['√¢m nh·∫°c', 'am nhac', 'music', 'nh·∫°c', 'nhac'],
            'm·ªπ thu·∫≠t': ['m·ªπ thu·∫≠t', 'my thuat', 'art', 'mt'],
            'tin h·ªçc': ['tin h·ªçc', 'tin hoc', 'computer', 'ict', 'cntt'],
            'sinh h·ªçc': ['sinh h·ªçc', 'sinh hoc', 'biology', 'bio'],
            'l·ªãch s·ª≠': ['l·ªãch s·ª≠', 'lich su', 'history'],
            'ƒë·ªãa l√Ω': ['ƒë·ªãa l√Ω', 'dia ly', 'geography'],
            'h√≥a h·ªçc': ['h√≥a h·ªçc', 'hoa hoc', 'chemistry'],
            'v·∫≠t l√Ω': ['v·∫≠t l√Ω', 'vat ly', 'physics'],
            'robotics': ['robotics', 'robot', 'l·∫≠p tr√¨nh', 'lap trinh'],
            'clb': ['clb', 'club', 'c√¢u l·∫°c b·ªô', 'cau lac bo']
          };

          // T·∫°o mapping t·ª´ t√™n m√¥n h·ªçc sang ID (exact match + fuzzy match)
          const subjectNameToIdMap: { [key: string]: string } = {};
          const subjectByName = new Map<string, { name: string; _id: string }>();
          
          subjects.forEach((subject: { name?: string; _id: string }) => {
            if (subject.name) {
              // Exact match
              subjectNameToIdMap[subject.name] = subject._id;
              const subjectWithName = { name: subject.name, _id: subject._id };
              subjectByName.set(subject.name.toLowerCase().trim(), subjectWithName);
              
              // Th√™m variations t·ª´ common mappings
              const subjectLower = subject.name.toLowerCase().trim();
              for (const [key, variations] of Object.entries(commonSubjectMappings)) {
                if (variations.some(v => subjectLower.includes(v) || v.includes(subjectLower))) {
                  variations.forEach(variation => {
                    if (!subjectByName.has(variation)) {
                      subjectByName.set(variation, subjectWithName);
                    }
                  });
                  // Th√™m key ch√≠nh
                  if (!subjectByName.has(key)) {
                    subjectByName.set(key, subjectWithName);
                  }
                }
              }
              
              // Th√™m m·ªôt s·ªë variations c∆° b·∫£n
              const variations = [
                subject.name.toLowerCase().trim(),
                subject.name.replace(/\s+/g, '').toLowerCase(),
                subject.name.replace(/h·ªçc/g, '').trim().toLowerCase(),
                subject.name.replace(/m√¥n/g, '').trim().toLowerCase(),
                subject.name.replace(/ti·∫øng/g, '').trim().toLowerCase(),
                subject.name.replace(/khoa/g, '').trim().toLowerCase()
              ].filter(v => v.length > 1);
              
              variations.forEach(variation => {
                if (variation && !subjectByName.has(variation)) {
                  subjectByName.set(variation, subjectWithName);
                }
              });
            }
          });
          
          // H√†m t√¨m subject ph√π h·ª£p
          const findMatchingSubject = (subjectName: string): string | null => {
            if (!subjectName) return null;
            
            console.log(`üîç Finding match for subject: "${subjectName}"`);
            
            // Exact match
            if (subjectNameToIdMap[subjectName]) {
              console.log(`‚úÖ Exact match found: "${subjectName}"`);
              return subjectNameToIdMap[subjectName];
            }
            
            // Fuzzy match
            const normalized = subjectName.toLowerCase().trim();
            const exactMatch = subjectByName.get(normalized);
            if (exactMatch) {
              console.log(`‚úÖ Fuzzy match found: "${subjectName}" -> "${exactMatch.name}"`);
              return exactMatch._id;
            }
            
            // T√¨m ki·∫øm partial match - m·ªü r·ªông h∆°n
            for (const [key, subject] of subjectByName) {
              // Check contains (both ways)
              if (key.includes(normalized) || normalized.includes(key)) {
                console.log(`‚úÖ Partial match found: "${subjectName}" -> "${subject.name}" (via "${key}")`);
                return subject._id;
              }
              
              // Check individual words
              const normalizedWords = normalized.split(/\s+/);
              const keyWords = key.split(/\s+/);
              
              const hasCommonWord = normalizedWords.some(word => 
                word.length > 2 && keyWords.some(keyWord => 
                  keyWord.includes(word) || word.includes(keyWord)
                )
              );
              
              if (hasCommonWord) {
                console.log(`‚úÖ Word match found: "${subjectName}" -> "${subject.name}" (words: ${normalizedWords.join(', ')})`);
                return subject._id;
              }
            }
            
            // Last resort - check if exact name exists in subjects (case insensitive)
            const directMatch = subjects.find((s: { name?: string; _id: string }) => 
              s.name && s.name.toLowerCase().trim() === normalized
            );
            
            if (directMatch) {
              console.log(`‚úÖ Direct match found: "${subjectName}" -> "${directMatch.name}"`);
              return directMatch._id;
            }
            
            console.warn(`‚ùå No match found for: "${subjectName}"`);
            return null;
          };
          
          // Convert subject names th√†nh subject IDs v√† th√™m scheduleId
          const recordsWithSubjectIds = records.map(record => {
            const matchedSubjectId = findMatchingSubject(record.subject);
            return {
              ...record,
              subject: matchedSubjectId || record.subject,
              originalSubject: record.subject, // Gi·ªØ l·∫°i t√™n g·ªëc ƒë·ªÉ debug
              scheduleId // ‚úÖ TH√äM: G·∫Øn scheduleId cho t·ª´ng record
            } as TimetableImportRecord & { originalSubject: string };
          });
          
          // L·ªçc ra c√°c record c√≥ subject ID h·ª£p l·ªá
          const validRecords = recordsWithSubjectIds.filter(record => {
            const isValid = subjects.some((s: { _id: string }) => s._id === record.subject);
            if (!isValid) {
              console.warn(`‚ö†Ô∏è  Subject not found: "${record.originalSubject}" -> "${record.subject}"`);
            }
            return isValid;
          });
          
          if (validRecords.length === 0) {
            const subjectsFromExcelHere = [...new Set(records.map(r => r.subject))];
            toast({
              title: "L·ªói",
              description: `Kh√¥ng t√¨m th·∫•y m√¥n h·ªçc n√†o ph√π h·ª£p trong h·ªá th·ªëng. C√°c m√¥n h·ªçc t·ª´ Excel: ${subjectsFromExcelHere.join(', ')}`,
              variant: "destructive"
            });
            return;
          }
          
          if (validRecords.length < records.length) {
            const unmatchedCount = records.length - validRecords.length;
            const unmatchedSubjectsHere = recordsWithSubjectIds
              .filter(r => !subjects.some((s: { _id: string }) => s._id === r.subject))
              .map(r => r.originalSubject);
            const uniqueUnmatchedSubjectsHere = [...new Set(unmatchedSubjectsHere)];
            
            console.warn(`C√≥ ${unmatchedCount} m√¥n h·ªçc kh√¥ng t√¨m th·∫•y trong h·ªá th·ªëng:`, uniqueUnmatchedSubjectsHere);
            
            toast({
              title: "C·∫£nh b√°o",
              description: `${unmatchedCount} m√¥n h·ªçc kh√¥ng kh·ªõp v·ªõi h·ªá th·ªëng s·∫Ω b·ªã b·ªè qua. Ki·ªÉm tra console ƒë·ªÉ xem danh s√°ch.`,
              variant: "destructive"
            });
          }

          // G·ª≠i d·ªØ li·ªáu l√™n BE ƒë·ªÉ import (lo·∫°i b·ªè originalSubject)
          const cleanRecords: TimetableImportRecord[] = validRecords.map(record => ({
            dayOfWeek: record.dayOfWeek,
            periodNumber: record.periodNumber,
            classCode: record.classCode,
            subject: record.subject,
            teachers: record.teachers,
            room: record.room,
            scheduleId: record.scheduleId // ‚úÖ TH√äM: G·∫Øn scheduleId cho t·ª´ng slot
          }));
          
          const importPayload: TimetableImportPayload = {
            schoolYear: selectedSchoolYear,
            records: cleanRecords
          };

          // Th·ªëng k√™ chi ti·∫øt v·ªÅ subject matching
          const subjectsFromExcel = [...new Set(records.map(r => r.subject))];
          const unmatchedSubjects = recordsWithSubjectIds
            .filter(r => !subjects.some((s: { _id: string }) => s._id === r.subject))
            .map(r => r.originalSubject);
          const uniqueUnmatchedSubjects = [...new Set(unmatchedSubjects)];
          
          console.log('üîç Subject matching summary:', {
            totalSubjectsInDB: subjects.length,
            availableSubjects: subjects.map((s: { name?: string }) => s.name).slice(0, 10),
            totalRecordsFromExcel: records.length,
            uniqueSubjectsFromExcel: subjectsFromExcel.length,
            subjectsFromExcel: subjectsFromExcel,
            recordsWithValidSubjects: validRecords.length,
            invalidRecords: recordsWithSubjectIds.length - validRecords.length,
            uniqueUnmatchedSubjects: uniqueUnmatchedSubjects.length,
            unmatchedSubjects: uniqueUnmatchedSubjects,
            sampleValidRecord: validRecords[0],
            subjectMappingCount: Object.keys(subjectNameToIdMap).length,
            mappingKeys: Array.from(subjectByName.keys()).slice(0, 20)
          });
          
          console.log('üîç Import payload debug:', {
            schoolYear: selectedSchoolYear,
            recordsCount: cleanRecords.length,
            sampleRecord: cleanRecords[0],
            subjectMapping: Object.keys(subjectNameToIdMap).slice(0, 5),
            scheduleId: scheduleId
          });

          const importResult = await api.post(API_ENDPOINTS.TIMETABLES_IMPORT, importPayload);
          
          console.log('üîç Import result:', importResult.data);
          
          toast({
            title: "Th√†nh c√¥ng",
            description: `Th·ªùi kho√° bi·ªÉu ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng v·ªõi ${cleanRecords.length}/${records.length} b·∫£n ghi`
          });
        } catch (parseError) {
          console.error('Error parsing Excel file:', parseError);
          toast({
            title: "L·ªói",
            description: `Kh√¥ng th·ªÉ ƒë·ªçc file Excel: ${parseError instanceof Error ? parseError.message : 'Unknown error'}`,
            variant: "destructive"
          });
          return;
        }
      } else {
        toast({
          title: "Th√†nh c√¥ng",
          description: "Th·ªùi kho√° bi·ªÉu ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng"
        });
      }

      // Reset form
      setFormData({
        name: '',
        startDate: undefined,
        endDate: undefined,
        file: null
      });

      onTimetableAdded();
      onClose();
    } catch (error) {
      console.error('Error adding timetable:', error);
      console.error('Error details:', {
        message: (error as { response?: { data?: { message?: string } } }).response?.data?.message,
        data: (error as { response?: { data?: unknown } }).response?.data,
        status: (error as { response?: { status?: number } }).response?.status
      });
      const errorMessage = (error as { response?: { data?: { message?: string } } }).response?.data?.message || "Kh√¥ng th·ªÉ th√™m th·ªùi kho√° bi·ªÉu. Vui l√≤ng th·ª≠ l·∫°i.";
      toast({
        title: "L·ªói",
        description: errorMessage,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setFormData({
      name: '',
      startDate: undefined,
      endDate: undefined,
      file: null
    });
    setFileError('');
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Calendar className="h-5 w-5" />
            Th√™m th·ªùi kho√° bi·ªÉu m·ªõi
          </DialogTitle>
          <DialogDescription>
            T·∫°o th·ªùi kho√° bi·ªÉu m·ªõi v·ªõi t√™n, kho·∫£ng th·ªùi gian v√† file Excel
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          {/* T√™n th·ªùi kho√° bi·ªÉu */}
          <div className="space-y-2">
            <Label htmlFor="timetable-name">T√™n th·ªùi kho√° bi·ªÉu *</Label>
            <Input
              id="timetable-name"
              placeholder="VD: Th·ªùi kho√° bi·ªÉu h·ªçc k·ª≥ 1"
              value={formData.name}
              onChange={(e) => handleInputChange('name', e.target.value)}
            />
          </div>

          {/* Ng√†y b·∫Øt ƒë·∫ßu */}
          <div className="space-y-2">
            <Label>Ng√†y b·∫Øt ƒë·∫ßu *</Label>
            <DatePicker
              date={formData.startDate}
              setDate={(date) => handleInputChange('startDate', date)}
            />
          </div>

          {/* Ng√†y k·∫øt th√∫c */}
          <div className="space-y-2">
            <Label>Ng√†y k·∫øt th√∫c *</Label>
            <DatePicker
              date={formData.endDate}
              setDate={(date) => handleInputChange('endDate', date)}
            />
          </div>

          {/* File upload */}
          <div className="space-y-2">
            <Label htmlFor="timetable-file">File th·ªùi kho√° bi·ªÉu *</Label>
            <div className="relative">
              <input
                type="file"
                accept=".xlsx,.xls"
                onChange={handleFileChange}
                className="hidden"
                id="timetable-file"
                disabled={loading}
              />
              <Button asChild variant="outline" className="w-full">
                <label htmlFor="timetable-file" className="cursor-pointer flex items-center gap-2">
                  {formData.file ? (
                    <>
                      <FileText className="h-4 w-4" />
                      {formData.file.name}
                    </>
                  ) : (
                    <>
                      <Upload className="h-4 w-4" />
                      Ch·ªçn file Excel
                    </>
                  )}
                </label>
              </Button>
            </div>
            {fileError && (
              <p className="text-sm text-red-500">{fileError}</p>
            )}
            <p className="text-xs text-gray-500">
              H·ªó tr·ª£ file Excel (.xlsx, .xls). K√≠ch th∆∞·ªõc t·ªëi ƒëa 5MB
              <br />
              Format: C·ªôt A=Th·ª© (VD: Th·ª© Hai), C·ªôt B=Ti·∫øt (VD: 1), C·ªôt C tr·ªü ƒëi=C√°c l·ªõp (VD: 1A1), Gi√° tr·ªã=T√™n m√¥n h·ªçc (VD: To√°n)
            </p>
          </div>
        </div>

        <DialogFooter>
          <Button
            type="button"
            variant="outline"
            onClick={handleClose}
            disabled={loading}
          >
            H·ªßy
          </Button>
          <Button 
            onClick={handleSubmit}
            disabled={loading}
          >
            {loading ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin mr-2" />
                ƒêang th√™m...
              </>
            ) : (
              "Th√™m th·ªùi kho√° bi·ªÉu"
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}; 